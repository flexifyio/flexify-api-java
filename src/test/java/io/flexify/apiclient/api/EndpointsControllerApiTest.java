/*
 * Flexify.IO User REST API
 * + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API
 *
 * OpenAPI spec version: 2.8.5
 * Contact: info@flexify.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.flexify.apiclient.api;

import io.flexify.apiclient.handler.ApiException;
import io.flexify.apiclient.model.AccessKeysPair;
import io.flexify.apiclient.model.AttachStorageAccountsRequest;
import io.flexify.apiclient.model.AttachVirtualBucketStoragesRequest;
import io.flexify.apiclient.model.CreateVirtualBucketRequest;
import io.flexify.apiclient.model.EndpointDetails;
import io.flexify.apiclient.model.EndpointSettings;
import io.flexify.apiclient.model.EndpointStorageAccountSettings;
import io.flexify.apiclient.model.VirtualBucketSettings;
import io.flexify.apiclient.model.VirtualBucketStorageSettings;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndpointsControllerApi
 */
@Ignore
public class EndpointsControllerApiTest {

    private final EndpointsControllerApi api = new EndpointsControllerApi();

    
    /**
     * Attach storage accounts to the endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachAccountsTest() throws ApiException {
        Long endpointId = null;
        AttachStorageAccountsRequest request = null;
        api.attachAccounts(endpointId, request);

        // TODO: test validations
    }
    
    /**
     * Attach storages to the virtual bucket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachBucketsTest() throws ApiException {
        Long endpointId = null;
        AttachVirtualBucketStoragesRequest request = null;
        String virtualBucket = null;
        api.attachBuckets(endpointId, request, virtualBucket);

        // TODO: test validations
    }
    
    /**
     * Creates new virtual bucket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVirtualBucketTest() throws ApiException {
        Long endpointId = null;
        CreateVirtualBucketRequest request = null;
        api.createVirtualBucket(endpointId, request);

        // TODO: test validations
    }
    
    /**
     * Deletes virtual bucket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVirtualBucketTest() throws ApiException {
        Long endpointId = null;
        String virtualBucket = null;
        api.deleteVirtualBucket(endpointId, virtualBucket);

        // TODO: test validations
    }
    
    /**
     * Detach storage account from the endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachAccountTest() throws ApiException {
        Long endpointId = null;
        Long storageAccountId = null;
        api.detachAccount(endpointId, storageAccountId);

        // TODO: test validations
    }
    
    /**
     * Detach storage account from the endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachBucketTest() throws ApiException {
        Long bucketId = null;
        Long endpointId = null;
        String virtualBucket = null;
        api.detachBucket(bucketId, endpointId, virtualBucket);

        // TODO: test validations
    }
    
    /**
     * Disable the endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableTest() throws ApiException {
        Long endpointId = null;
        api.disable(endpointId);

        // TODO: test validations
    }
    
    /**
     * Enable the endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableTest() throws ApiException {
        Long endpointId = null;
        api.enable(endpointId);

        // TODO: test validations
    }
    
    /**
     * Generate new access keys pair
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateAccessKeysTest() throws ApiException {
        AccessKeysPair response = api.generateAccessKeys();

        // TODO: test validations
    }
    
    /**
     * Get endpoint details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointDetailsTest() throws ApiException {
        Long endpointId = null;
        EndpointDetails response = api.getEndpointDetails(endpointId);

        // TODO: test validations
    }
    
    /**
     * Get endpoint for current user. This method will create new endpoint if no endpoints exist for user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointsForCurrentUserTest() throws ApiException {
        List<EndpointDetails> response = api.getEndpointsForCurrentUser();

        // TODO: test validations
    }
    
    /**
     * Modifies settings of the attached storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAttachedAccountSettingsTest() throws ApiException {
        Long endpointId = null;
        EndpointStorageAccountSettings settings = null;
        Long storageAccountId = null;
        api.setAttachedAccountSettings(endpointId, settings, storageAccountId);

        // TODO: test validations
    }
    
    /**
     * Modifies settings of the attached storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAttachedBucketSettingsTest() throws ApiException {
        Long bucketId = null;
        Long endpointId = null;
        VirtualBucketStorageSettings settings = null;
        String virtualBucket = null;
        api.setAttachedBucketSettings(bucketId, endpointId, settings, virtualBucket);

        // TODO: test validations
    }
    
    /**
     * Modifies virtual bucket configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVirtualBucketSettingsTest() throws ApiException {
        Long endpointId = null;
        VirtualBucketSettings settings = null;
        String virtualBucket = null;
        api.setVirtualBucketSettings(endpointId, settings, virtualBucket);

        // TODO: test validations
    }
    
    /**
     * Update attributes of the endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEndpointSettingsTest() throws ApiException {
        Long endpointId = null;
        EndpointSettings settings = null;
        api.updateEndpointSettings(endpointId, settings);

        // TODO: test validations
    }
    
}
