/*
 * Flexify.IO User REST API
 * + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API
 *
 * OpenAPI spec version: 2.4.0-SNAPSHOT
 * Contact: info@flexify.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.flexify.apiclient.api;

import io.flexify.apiclient.handler.ApiException;
import io.flexify.apiclient.model.AccessKeysPair;
import io.flexify.apiclient.model.AddBucketsToStorageAccountRequest;
import io.flexify.apiclient.model.AddStorageAccountWithBucketsRequest;
import io.flexify.apiclient.model.Bucket;
import io.flexify.apiclient.model.IdResponse;
import io.flexify.apiclient.model.IdsList;
import io.flexify.apiclient.model.Storage;
import io.flexify.apiclient.model.StorageAccount;
import io.flexify.apiclient.model.StorageProvider;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoragesControllerApi
 */
@Ignore
public class StoragesControllerApiTest {

    private final StoragesControllerApi api = new StoragesControllerApi();

    
    /**
     * Add buckets to the storage account and optionally attach them to endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBucketsToStorageAccountUsingPOSTTest() throws ApiException {
        Long storageAccountId = null;
        AddBucketsToStorageAccountRequest request = null;
        api.addBucketsToStorageAccountUsingPOST(storageAccountId, request);

        // TODO: test validations
    }
    
    /**
     * Add Storage Account with buckets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addStorageAccountWithBucketsUsingPOSTTest() throws ApiException {
        AddStorageAccountWithBucketsRequest request = null;
        IdResponse response = api.addStorageAccountWithBucketsUsingPOST(request);

        // TODO: test validations
    }
    
    /**
     * Delete Storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStorageUsingDELETETest() throws ApiException {
        Long storageAccountId = null;
        Long storageId = null;
        api.deleteStorageUsingDELETE(storageAccountId, storageId);

        // TODO: test validations
    }
    
    /**
     * Deletes storages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragesUsingPOSTTest() throws ApiException {
        IdsList request = null;
        api.deleteStoragesUsingPOST(request);

        // TODO: test validations
    }
    
    /**
     * Generate new access keys pair
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateAccessKeysUsingGETTest() throws ApiException {
        AccessKeysPair response = api.generateAccessKeysUsingGET();

        // TODO: test validations
    }
    
    /**
     * Get all storage providers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllStorageProvidersUsingGETTest() throws ApiException {
        List<StorageProvider> response = api.getAllStorageProvidersUsingGET();

        // TODO: test validations
    }
    
    /**
     * Retrieve buckets from external cloud storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBucketsForStorageAccountUsingGETTest() throws ApiException {
        Long storageAccountId = null;
        List<Bucket> response = api.getBucketsForStorageAccountUsingGET(storageAccountId);

        // TODO: test validations
    }
    
    /**
     * Lists buckets of the external storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBucketsUsingGETTest() throws ApiException {
        Long providerId = null;
        String identity = null;
        String credential = null;
        String customUrl = null;
        Boolean useSsl = null;
        List<Bucket> response = api.getBucketsUsingGET(providerId, identity, credential, customUrl, useSsl);

        // TODO: test validations
    }
    
    /**
     * Get all storage accounts for current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageAccountsForCurrentUserUsingGETTest() throws ApiException {
        Boolean includeStorages = null;
        List<StorageAccount> response = api.getStorageAccountsForCurrentUserUsingGET(includeStorages);

        // TODO: test validations
    }
    
    /**
     * Get storages of the storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragesForStorageAccountUsingGETTest() throws ApiException {
        Long storageAccountId = null;
        List<Storage> response = api.getStoragesForStorageAccountUsingGET(storageAccountId);

        // TODO: test validations
    }
    
    /**
     * Refresh storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshStorageUsingPOSTTest() throws ApiException {
        Long storageAccountId = null;
        Long storageId = null;
        api.refreshStorageUsingPOST(storageAccountId, storageId);

        // TODO: test validations
    }
    
    /**
     * Refresh storages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshStoragesUsingPOSTTest() throws ApiException {
        IdsList request = null;
        api.refreshStoragesUsingPOST(request);

        // TODO: test validations
    }
    
}
