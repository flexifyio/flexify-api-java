/*
 * Flexify.IO User REST API
 * + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API
 *
 * OpenAPI spec version: 2.6
 * Contact: info@flexify.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.flexify.apiclient.api;

import io.flexify.apiclient.handler.ApiException;
import io.flexify.apiclient.model.AccessKeysPair;
import io.flexify.apiclient.model.AddStorageAccountRequest;
import io.flexify.apiclient.model.Bucket;
import io.flexify.apiclient.model.BucketsRequest;
import io.flexify.apiclient.model.IdResponse;
import io.flexify.apiclient.model.IdsList;
import io.flexify.apiclient.model.StorageAccount;
import io.flexify.apiclient.model.StorageProvider;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoragesControllerApi
 */
@Ignore
public class StoragesControllerApiTest {

    private final StoragesControllerApi api = new StoragesControllerApi();

    
    /**
     * Add buckets to the storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBucketsTest() throws ApiException {
        Long storageAccountId = null;
        BucketsRequest request = null;
        IdsList response = api.addBuckets(storageAccountId, request);

        // TODO: test validations
    }
    
    /**
     * Add Storage Account with an optional list of buckets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addStorageAccountTest() throws ApiException {
        AddStorageAccountRequest request = null;
        IdResponse response = api.addStorageAccount(request);

        // TODO: test validations
    }
    
    /**
     * Deletes (hides) a bucket/container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBucketTest() throws ApiException {
        Long storageAccountId = null;
        Long bucketId = null;
        api.deleteBucket(storageAccountId, bucketId);

        // TODO: test validations
    }
    
    /**
     * Deletes (hides) multiple buckets/containers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBucketsTest() throws ApiException {
        IdsList request = null;
        api.deleteBuckets(request);

        // TODO: test validations
    }
    
    /**
     * Generate new access keys pair
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateAccessKeysTest() throws ApiException {
        AccessKeysPair response = api.generateAccessKeys();

        // TODO: test validations
    }
    
    /**
     * Get registered non-hidden bukects/containers of the storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBucketsTest() throws ApiException {
        Long storageAccountId = null;
        List<Bucket> response = api.getBuckets(storageAccountId);

        // TODO: test validations
    }
    
    /**
     * Get all storage providers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        List<StorageProvider> response = api.getProviders();

        // TODO: test validations
    }
    
    /**
     * Get all storage accounts for current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageAccountsTest() throws ApiException {
        Boolean includeStorages = null;
        List<StorageAccount> response = api.getStorageAccounts(includeStorages);

        // TODO: test validations
    }
    
    /**
     * Refresh statistics of a single bucket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshBucketTest() throws ApiException {
        Long storageAccountId = null;
        Long bucketId = null;
        api.refreshBucket(storageAccountId, bucketId);

        // TODO: test validations
    }
    
    /**
     * Refresh statistics of multiple buckets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshBucketsTest() throws ApiException {
        IdsList request = null;
        api.refreshBuckets(request);

        // TODO: test validations
    }
    
    /**
     * Lists buckets of the external storage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestBucketsTest() throws ApiException {
        Long providerId = null;
        String identity = null;
        String credential = null;
        String customUrl = null;
        Boolean useSsl = null;
        List<Bucket> response = api.requestBuckets(providerId, identity, credential, customUrl, useSsl);

        // TODO: test validations
    }
    
    /**
     * Retrieve buckets/containers list from underlying cloud
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestCloudBucketsTest() throws ApiException {
        Long storageAccountId = null;
        List<Bucket> response = api.requestCloudBuckets(storageAccountId);

        // TODO: test validations
    }
    
    /**
     * Sets a list of bucket for a storage account (hides existing buckets not in a list and adds buckets not in a list)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBucketsTest() throws ApiException {
        Long storageAccountId = null;
        BucketsRequest request = null;
        IdsList response = api.setBuckets(storageAccountId, request);

        // TODO: test validations
    }
    
}
