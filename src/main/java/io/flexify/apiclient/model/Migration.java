/*
 * Flexify.IO User REST API
 * + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API
 *
 * OpenAPI spec version: 2.5.0-SNAPSHOT
 * Contact: info@flexify.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.flexify.apiclient.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.flexify.apiclient.model.CloudLocation;
import io.flexify.apiclient.model.MigrationStat;
import io.flexify.apiclient.model.MigrationStorageMapping;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Migration
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-18T14:37:49.273+03:00")
public class Migration {
  /**
   * Conflict resolution
   */
  public enum ConflictResolutionEnum {
    SOURCE("SOURCE"),
    
    DESTINATION("DESTINATION"),
    
    BOTH("BOTH"),
    
    NEWER("NEWER");

    private String value;

    ConflictResolutionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConflictResolutionEnum fromValue(String text) {
      for (ConflictResolutionEnum b : ConflictResolutionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("conflictResolution")
  private ConflictResolutionEnum conflictResolution = null;

  @JsonProperty("countSourceObjects")
  private Boolean countSourceObjects = null;

  @JsonProperty("enginesLocation")
  private CloudLocation enginesLocation = null;

  /**
   * Keep or clean data in destination before migration (identical with source objects keep in any cases)
   */
  public enum ExistingDataInDestinationEnum {
    KEEP("KEEP"),
    
    CLEAN("CLEAN");

    private String value;

    ExistingDataInDestinationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExistingDataInDestinationEnum fromValue(String text) {
      for (ExistingDataInDestinationEnum b : ExistingDataInDestinationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("existingDataInDestination")
  private ExistingDataInDestinationEnum existingDataInDestination = null;

  @JsonProperty("hidden")
  private Boolean hidden = null;

  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("maxConnectionsPerEngine")
  private Integer maxConnectionsPerEngine = null;

  /**
   * Migration mode
   */
  public enum MigrationModeEnum {
    COPY("COPY"),
    
    MOVE("MOVE");

    private String value;

    MigrationModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MigrationModeEnum fromValue(String text) {
      for (MigrationModeEnum b : MigrationModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("migrationMode")
  private MigrationModeEnum migrationMode = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("objectKeyFilter")
  private String objectKeyFilter = null;

  @JsonProperty("slots")
  private Integer slots = null;

  @JsonProperty("stat")
  private MigrationStat stat = null;

  @JsonProperty("storageMappings")
  private List<MigrationStorageMapping> storageMappings = null;

  public Migration conflictResolution(ConflictResolutionEnum conflictResolution) {
    this.conflictResolution = conflictResolution;
    return this;
  }

   /**
   * Conflict resolution
   * @return conflictResolution
  **/
  @ApiModelProperty(example = "NEWER", required = true, value = "Conflict resolution")
  public ConflictResolutionEnum getConflictResolution() {
    return conflictResolution;
  }

  public void setConflictResolution(ConflictResolutionEnum conflictResolution) {
    this.conflictResolution = conflictResolution;
  }

  public Migration countSourceObjects(Boolean countSourceObjects) {
    this.countSourceObjects = countSourceObjects;
    return this;
  }

   /**
   * Count objects in source before migration
   * @return countSourceObjects
  **/
  @ApiModelProperty(example = "true", value = "Count objects in source before migration")
  public Boolean isCountSourceObjects() {
    return countSourceObjects;
  }

  public void setCountSourceObjects(Boolean countSourceObjects) {
    this.countSourceObjects = countSourceObjects;
  }

  public Migration enginesLocation(CloudLocation enginesLocation) {
    this.enginesLocation = enginesLocation;
    return this;
  }

   /**
   * Location of the engines to migrate
   * @return enginesLocation
  **/
  @ApiModelProperty(value = "Location of the engines to migrate")
  public CloudLocation getEnginesLocation() {
    return enginesLocation;
  }

  public void setEnginesLocation(CloudLocation enginesLocation) {
    this.enginesLocation = enginesLocation;
  }

  public Migration existingDataInDestination(ExistingDataInDestinationEnum existingDataInDestination) {
    this.existingDataInDestination = existingDataInDestination;
    return this;
  }

   /**
   * Keep or clean data in destination before migration (identical with source objects keep in any cases)
   * @return existingDataInDestination
  **/
  @ApiModelProperty(example = "KEEP", value = "Keep or clean data in destination before migration (identical with source objects keep in any cases)")
  public ExistingDataInDestinationEnum getExistingDataInDestination() {
    return existingDataInDestination;
  }

  public void setExistingDataInDestination(ExistingDataInDestinationEnum existingDataInDestination) {
    this.existingDataInDestination = existingDataInDestination;
  }

  public Migration hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Hide migration on UI
   * @return hidden
  **/
  @ApiModelProperty(example = "false", value = "Hide migration on UI")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

   /**
   * Unique identifier
   * @return id
  **/
  @ApiModelProperty(value = "Unique identifier")
  public Long getId() {
    return id;
  }

  public Migration maxConnectionsPerEngine(Integer maxConnectionsPerEngine) {
    this.maxConnectionsPerEngine = maxConnectionsPerEngine;
    return this;
  }

   /**
   * Maximum Connections per engine
   * @return maxConnectionsPerEngine
  **/
  @ApiModelProperty(example = "1", value = "Maximum Connections per engine")
  public Integer getMaxConnectionsPerEngine() {
    return maxConnectionsPerEngine;
  }

  public void setMaxConnectionsPerEngine(Integer maxConnectionsPerEngine) {
    this.maxConnectionsPerEngine = maxConnectionsPerEngine;
  }

  public Migration migrationMode(MigrationModeEnum migrationMode) {
    this.migrationMode = migrationMode;
    return this;
  }

   /**
   * Migration mode
   * @return migrationMode
  **/
  @ApiModelProperty(example = "COPY", required = true, value = "Migration mode")
  public MigrationModeEnum getMigrationMode() {
    return migrationMode;
  }

  public void setMigrationMode(MigrationModeEnum migrationMode) {
    this.migrationMode = migrationMode;
  }

  public Migration name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the migration
   * @return name
  **/
  @ApiModelProperty(example = "Copy from source to destination", required = true, value = "Name of the migration")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Migration objectKeyFilter(String objectKeyFilter) {
    this.objectKeyFilter = objectKeyFilter;
    return this;
  }

   /**
   * Migrate objects matching pattern
   * @return objectKeyFilter
  **/
  @ApiModelProperty(example = "*", value = "Migrate objects matching pattern")
  public String getObjectKeyFilter() {
    return objectKeyFilter;
  }

  public void setObjectKeyFilter(String objectKeyFilter) {
    this.objectKeyFilter = objectKeyFilter;
  }

  public Migration slots(Integer slots) {
    this.slots = slots;
    return this;
  }

   /**
   * Number of slots of migration
   * @return slots
  **/
  @ApiModelProperty(example = "1", value = "Number of slots of migration")
  public Integer getSlots() {
    return slots;
  }

  public void setSlots(Integer slots) {
    this.slots = slots;
  }

  public Migration stat(MigrationStat stat) {
    this.stat = stat;
    return this;
  }

   /**
   * Migration statistics
   * @return stat
  **/
  @ApiModelProperty(value = "Migration statistics")
  public MigrationStat getStat() {
    return stat;
  }

  public void setStat(MigrationStat stat) {
    this.stat = stat;
  }

  public Migration storageMappings(List<MigrationStorageMapping> storageMappings) {
    this.storageMappings = storageMappings;
    return this;
  }

  public Migration addStorageMappingsItem(MigrationStorageMapping storageMappingsItem) {
    if (this.storageMappings == null) {
      this.storageMappings = new ArrayList<MigrationStorageMapping>();
    }
    this.storageMappings.add(storageMappingsItem);
    return this;
  }

   /**
   * Source to destination storages mappings
   * @return storageMappings
  **/
  @ApiModelProperty(value = "Source to destination storages mappings")
  public List<MigrationStorageMapping> getStorageMappings() {
    return storageMappings;
  }

  public void setStorageMappings(List<MigrationStorageMapping> storageMappings) {
    this.storageMappings = storageMappings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Migration migration = (Migration) o;
    return Objects.equals(this.conflictResolution, migration.conflictResolution) &&
        Objects.equals(this.countSourceObjects, migration.countSourceObjects) &&
        Objects.equals(this.enginesLocation, migration.enginesLocation) &&
        Objects.equals(this.existingDataInDestination, migration.existingDataInDestination) &&
        Objects.equals(this.hidden, migration.hidden) &&
        Objects.equals(this.id, migration.id) &&
        Objects.equals(this.maxConnectionsPerEngine, migration.maxConnectionsPerEngine) &&
        Objects.equals(this.migrationMode, migration.migrationMode) &&
        Objects.equals(this.name, migration.name) &&
        Objects.equals(this.objectKeyFilter, migration.objectKeyFilter) &&
        Objects.equals(this.slots, migration.slots) &&
        Objects.equals(this.stat, migration.stat) &&
        Objects.equals(this.storageMappings, migration.storageMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictResolution, countSourceObjects, enginesLocation, existingDataInDestination, hidden, id, maxConnectionsPerEngine, migrationMode, name, objectKeyFilter, slots, stat, storageMappings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Migration {\n");
    
    sb.append("    conflictResolution: ").append(toIndentedString(conflictResolution)).append("\n");
    sb.append("    countSourceObjects: ").append(toIndentedString(countSourceObjects)).append("\n");
    sb.append("    enginesLocation: ").append(toIndentedString(enginesLocation)).append("\n");
    sb.append("    existingDataInDestination: ").append(toIndentedString(existingDataInDestination)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxConnectionsPerEngine: ").append(toIndentedString(maxConnectionsPerEngine)).append("\n");
    sb.append("    migrationMode: ").append(toIndentedString(migrationMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    objectKeyFilter: ").append(toIndentedString(objectKeyFilter)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    storageMappings: ").append(toIndentedString(storageMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

