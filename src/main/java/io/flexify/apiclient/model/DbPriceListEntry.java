/*
 * Flexify.IO User REST API
 * + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API
 *
 * OpenAPI spec version: 2.4.0-SNAPSHOT
 * Contact: info@flexify.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.flexify.apiclient.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.flexify.apiclient.model.DbMoney;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * DbPriceListEntry
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-07T17:03:52.903+03:00")
public class DbPriceListEntry {
  /**
   * Gets or Sets counter
   */
  public enum CounterEnum {
    TRAFFIC("TRAFFIC"),
    
    STORAGE_VOLUME("STORAGE_VOLUME");

    private String value;

    CounterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CounterEnum fromValue(String text) {
      for (CounterEnum b : CounterEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("counter")
  private CounterEnum counter = null;

  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("price")
  private DbMoney price = null;

  /**
   * Gets or Sets service
   */
  public enum ServiceEnum {
    MIGRATION("DATA_MIGRATION"),
    
    FORWARDING("DATA_FORWARDING");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServiceEnum fromValue(String text) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("service")
  private ServiceEnum service = null;

  @JsonProperty("unitName")
  private String unitName = null;

  @JsonProperty("unitSize")
  private Long unitSize = null;

  public DbPriceListEntry counter(CounterEnum counter) {
    this.counter = counter;
    return this;
  }

   /**
   * Get counter
   * @return counter
  **/
  @ApiModelProperty(value = "")
  public CounterEnum getCounter() {
    return counter;
  }

  public void setCounter(CounterEnum counter) {
    this.counter = counter;
  }

  public DbPriceListEntry id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DbPriceListEntry price(DbMoney price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @ApiModelProperty(value = "")
  public DbMoney getPrice() {
    return price;
  }

  public void setPrice(DbMoney price) {
    this.price = price;
  }

  public DbPriceListEntry service(ServiceEnum service) {
    this.service = service;
    return this;
  }

   /**
   * Get service
   * @return service
  **/
  @ApiModelProperty(value = "")
  public ServiceEnum getService() {
    return service;
  }

  public void setService(ServiceEnum service) {
    this.service = service;
  }

  public DbPriceListEntry unitName(String unitName) {
    this.unitName = unitName;
    return this;
  }

   /**
   * Get unitName
   * @return unitName
  **/
  @ApiModelProperty(value = "")
  public String getUnitName() {
    return unitName;
  }

  public void setUnitName(String unitName) {
    this.unitName = unitName;
  }

  public DbPriceListEntry unitSize(Long unitSize) {
    this.unitSize = unitSize;
    return this;
  }

   /**
   * Get unitSize
   * @return unitSize
  **/
  @ApiModelProperty(value = "")
  public Long getUnitSize() {
    return unitSize;
  }

  public void setUnitSize(Long unitSize) {
    this.unitSize = unitSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbPriceListEntry dbPriceListEntry = (DbPriceListEntry) o;
    return Objects.equals(this.counter, dbPriceListEntry.counter) &&
        Objects.equals(this.id, dbPriceListEntry.id) &&
        Objects.equals(this.price, dbPriceListEntry.price) &&
        Objects.equals(this.service, dbPriceListEntry.service) &&
        Objects.equals(this.unitName, dbPriceListEntry.unitName) &&
        Objects.equals(this.unitSize, dbPriceListEntry.unitSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(counter, id, price, service, unitName, unitSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbPriceListEntry {\n");
    
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    unitName: ").append(toIndentedString(unitName)).append("\n");
    sb.append("    unitSize: ").append(toIndentedString(unitSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

